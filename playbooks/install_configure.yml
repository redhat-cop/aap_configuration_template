---
- name: Playbook to configure ansible automation platform installation
  hosts: "{{ env }}"
  connection: local
  vars_files:
    - "../vaults/{{ env }}.yml"
  tasks:
    - name: include aap_setup_download role
      ansible.builtin.include_role:
        name: infra.aap_utilities.aap_setup_download

    - name: include aap_setup_prepare role
      ansible.builtin.include_role:
        name: infra.aap_utilities.aap_setup_prepare

    - name: include aap_setup_install role
      ansible.builtin.include_role:
        name: infra.aap_utilities.aap_setup_install

- name: configure private automation hub after installation
  hosts: "{{ env }}"
  gather_facts: false
  connection: local
  vars_files:
    - "../vaults/{{ env }}.yml"
  tasks:
    - name: include repository role
      ansible.builtin.include_role:
        name: infra.ah_configuration.repository

    - name: include repository sync role
      ansible.builtin.include_role:
        name: infra.ah_configuration.repository_sync

    - name: include group role
      ansible.builtin.include_role:
        name: infra.ah_configuration.group
      when: ah_groups | length is not match('0')

    - name: include user role
      ansible.builtin.include_role:
        name: infra.ah_configuration.user
      when: ah_users | length is not match('0')

- name: Playbook to configure ansible controller post installation
  hosts: "{{ env }}"
  vars_files:
    - "../vaults/{{ env }}.yml"
  connection: local
  tasks:
    - name: Get subscriptions with a filter
      awx.awx.subscriptions:
        username: "{{ rh_username }}"
        password: "{{ rh_password }}"
        filters:
          product_name: Red Hat Ansible Automation Platform
          support_level: Self-Support
        controller_host: "{{ controller_hostname }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: false
      register: subscription

    - name: Attach to a pool
      awx.awx.license:
        pool_id: "{{ subscription.subscriptions[0].pool_id }}"
        controller_host: "{{ controller_hostname }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs: false

    - name: include setting role
      ansible.builtin.include_role:
        name: infra.controller_configuration.settings
      when: controller_settings | length is not match('0')

    - name: create organizations without credentials
      ansible.builtin.set_fact:
        orgs_no_creds: "{{ orgs_no_creds | default([]) + [{ 'name' : item.name }] }}"
      loop: "{{ controller_organizations }}"
      when:
        - controller_organizations | length is not match('0')
        - (item.state | default('Present')) != 'absent'

    - name: print out custom fact
      ansible.builtin.debug:
        var: orgs_no_creds
        verbosity: 2

    - name: include organization role
      ansible.builtin.include_role:
        name: infra.controller_configuration.organizations
      vars:
        controller_organizations: "{{ orgs_no_creds }}"
      when: orgs_no_creds | length is not match('0')

    - name: include labels role
      ansible.builtin.include_role:
        name: infra.controller_configuration.labels
      when: controller_labels | length is not match('0')

    - name: include users role
      ansible.builtin.include_role:
        name: infra.controller_configuration.users
      vars:
        controller_configuration_users_secure_logging: true
      when: controller_user_accounts | length is not match('0')

    - name: include teams role
      ansible.builtin.include_role:
        name: infra.controller_configuration.teams
      when: controller_teams | length is not match('0')

   # probably not optimal but works, looking for better solutions
    - name: Figuring out AH token
      block:
        - name: Authenticate and get an API token from Automation Hub
          infra.ah_configuration.ah_token:
            ah_host: "{{ ah_host | default(groups['automationhub'][0]) }}"
            ah_username: "{{ ah_token_username | default('admin') }}"
            ah_password: "{{ ah_token_password }}"
            ah_path_prefix: 'galaxy' # this is for private automation hub
            validate_certs: false
          register: r_ah_token

        - name: Fixing format
          ansible.builtin.set_fact:
            ah_token: "{{ ah_token['token'] }}"
          when: r_ah_token['changed']
       # what needs to be done to guarantee this to work?
#      rescue:
      when: ah_token is not defined or ah_token['token'] | length is not match('0')

    - name: update credentials
      block:
        - name: include credential_types role
          ansible.builtin.include_role:
            name: infra.controller_configuration.credential_types
          when: controller_credential_types | length is not match('0')

      rescue:
        - name: pulling credential_types list
          ansible.builtin.set_fact:
            cf_current_credential_types: "{{ cf_current_credential_types | default([]) + [{ 'name' : item.name, 'state' : 'absent'}] }}"
          loop: "{{ _current_cred_types }}"
          vars:
            _current_cred_types: "{{ lookup('awx.awx.tower_api', 'credential_types', query_params={ 'namespace__isnull': true } ,host=controller_hostname, username=controller_username, password=controller_password, verify_ssl=controller_validate_certs) }}"
#            _current_cred_types: "{{ lookup('ansible.controller.controller_api', 'credential_types', query_params={ 'namespace__isnull': true } ,host=controller_hostname, username=controller_username, password=controller_password, verify_ssl=controller_validate_certs) }}"

        - name: pulling credentials list
          ansible.builtin.set_fact:
            cf_current_credentials: "{{ cf_current_credentials | default([]) + [{ 'name' : item.name, 'credential_type' : item.credential_type, 'state' : 'absent'}] }}"
          loop: "{{ _current_credentials }}"
          vars:
            _current_credentials: "{{ lookup('awx.awx.tower_api', 'credentials', host=controller_hostname, username=controller_username, password=controller_password, verify_ssl=controller_validate_certs) }}"
#            _current_cred_types: "{{ lookup('ansible.controller.controller_api', 'credentials', host=controller_hostname, username=controller_username, password=controller_password, verify_ssl=controller_validate_certs) }}"

        - name: include credential_types role
          ansible.builtin.include_role:
            name: infra.controller_configuration.credentials
            apply:
              ignore_errors: true # need to ignore errors because you cannot delete default ansible galaxy and container registry creds which will error
          vars:
            controller_credentials: "{{ cf_current_credentials }}"
            controller_configuration_credentials_secure_logging: false

        - name: include credential_types role
          ansible.builtin.include_role:
            name: infra.controller_configuration.credential_types
          vars:
            controller_credential_types: "{{ cf_current_credential_types }}"

        - name: include credential_types role
          ansible.builtin.include_role:
            name: infra.controller_configuration.credential_types

    - name: include credential role
      ansible.builtin.include_role:
        name: infra.controller_configuration.credentials
      vars:
        controller_configuration_credentials_secure_logging: true
      when: controller_credentials | length is not match('0')

    - name: include credential_input_sources role
      ansible.builtin.include_role:
        name: infra.controller_configuration.credential_input_sources
      when: controller_credential_input_sources | length is not match('0')

    - name: include organizations role
      ansible.builtin.include_role:
        name: infra.controller_configuration.organizations
      when: controller_organizations | length is not match('0')

    - name: include execution_environments role
      ansible.builtin.include_role:
        name: infra.controller_configuration.execution_environments
      when: controller_execution_environments | length is not match('0')

    - name: include projects role
      ansible.builtin.include_role:
        name: infra.controller_configuration.projects
      when: controller_projects | length is not match('0')

    - name: include inventories role
      ansible.builtin.include_role:
        name: infra.controller_configuration.inventories
      when: controller_inventories | length is not match('0')

    - name: include inventory_sources role
      ansible.builtin.include_role:
        name: infra.controller_configuration.inventory_sources
      when: controller_inventory_sources | length is not match('0')

    - name: include inventory_source_update role
      ansible.builtin.include_role:
        name: infra.controller_configuration.inventory_source_update

    - name: include groups role
      ansible.builtin.include_role:
        name: infra.controller_configuration.groups
      when: controller_groups | length is not match('0')

    - name: include applications role
      ansible.builtin.include_role:
        name: infra.controller_configuration.applications
      when: controller_applications | length is not match('0')

    - name: include job_templates role
      ansible.builtin.include_role:
        name: infra.controller_configuration.job_templates
      when: controller_templates | length is not match('0')

    - name: include workflow_job_templates role
      ansible.builtin.include_role:
        name: infra.controller_configuration.workflow_job_templates
      when: controller_workflows | length is not match('0')

    - name: include schedules role
      ansible.builtin.include_role:
        name: infra.controller_configuration.schedules
      when: controller_schedules | length is not match('0')

    - name: include roles role
      ansible.builtin.include_role:
        name: infra.controller_configuration.roles
      when: controller_roles | length is not match('0')

    - name: launch build custom collection job template
      awx.awx.job_launch:
        name: build_custom_collections
        controller_host:     "{{ controller_hostname }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs:      "{{ controller_validate_certs }}"

    - name: launch build execution environment job template
      awx.awx.job_launch:
        name: build_execution_environments
        controller_host:     "{{ controller_hostname }}"
        controller_username: "{{ controller_username }}"
        controller_password: "{{ controller_password }}"
        validate_certs:      "{{ controller_validate_certs }}"

# - name: publish custom collection
#   hosts: "{{ env }}"
#   gather_facts: false
#   vars:
#     custom_cop: true
#   tasks:
#     # remove this role when copying for your own code (see readme for more detail)
#     - name: fixing loop issue
#       ansible.builtin.set_fact:
#         ah_collection: "{{ ah_collections }}"
#       when: custom_cop | default(false)

#     - name: include fix_collection role
#       ansible.builtin.include_role:
#         name: fix_collection
#       when: custom_cop
#       vars:
#         ah_collections: "{{ ah_collection + cop_list }}"
#         cop_list:
#           - collection_name: ah_configuration
#             git_url: https://github.com/redhat-cop/ah_configuration.git
#           - collection_name: controller_configuration
#             git_url: https://github.com/redhat-cop/controller_configuration.git
#           - collection_name: ee_utilities
#             git_url: https://github.com/redhat-cop/ee_utilities.git
#           - collection_name: aap_utilities
#             git_url: https://github.com/redhat-cop/aap_utilities.git

#     - name: include namespace role
#       ansible.builtin.include_role:
#         name: infra.ah_configuration.namespace

#     - name: include publish role
#       ansible.builtin.include_role:
#         name: infra.ah_configuration.publish

# - name: playbook to configure execution environments
#   hosts: "{{ env }}"
#   gather_facts: true
#   pre_tasks:
#     - name: validate that ansible-builder is installed on target system
#       block:
#         - name: try command
#           ansible.builtin.shell: ansible-builder --version
#           register: r_builder
#           changed_when: false
#       rescue:
#         - name: Install ansible-builder
#           ansible.builtin.dnf:
#             name:
#               - ansible-builder
#               - ansible-core
#             enablerepo: ansible-automation-platform-2.2-for-rhel-8-x86_64-rpms
#             state: present
#           become: true

#   tasks:
#     - name: include ee_builder role
#       ansible.builtin.include_role:
#         name: infra.ee_utilities.ee_builder
...
