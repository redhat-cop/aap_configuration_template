---
- name: Playbook to configure ansible controller post installation
  hosts: all
  vars_files:
    - "../vaults/{{ env }}.yml"
    - "../vars/main.yml"
  connection: local
  tasks:
    - name: Include all vars from org directories
      ansible.builtin.include_vars:
        dir: "../vars/{{ item }}{{ env }}"
        ignore_unknown_extensions: true
        name: "{{ item }}"
      loop: "{{ org_directories }}"

    # probably not optimal but works, looking for better solutions
    - name: Figuring out AH token
      when: ah_token is not defined or ah_token['token'] is defined
      block:
        - name: Authenticate and get an API token from Automation Hub
          infra.ah_configuration.ah_token:
            ah_host: "{{ ah_host | default(groups['automationhub'][0]) }}"
            ah_username: "{{ ah_token_username | default('admin') }}"
            ah_password: "{{ ah_token_password }}"
            ah_path_prefix: 'galaxy' # this is for private automation hub
            validate_certs: false
          register: r_ah_token

        - name: Fixing format
          ansible.builtin.set_fact:
            ah_token: "{{ ah_token['token'] }}"
          when: r_ah_token['changed']
          # what needs to be done to guarantee this to work?

    - name: Compose complete vars
      ansible.builtin.set_fact:
        controller_credential_input_sources: "{{ controller_credential_input_sources | default([]) + org_var['controller_credential_input_sources'] }}"
        controller_credentials: "{{ controller_credentials | default([]) + org_var['controller_credentials'] }}"
        controller_groups: "{{ controller_groups | default([]) + org_var['controller_groups'] }}"
        controller_hosts: "{{ controller_hosts | default([]) + org_var['controller_hosts'] }}"
        controller_inventories: "{{ controller_inventories | default([]) + org_var['controller_inventories'] }}"
        controller_inventory_sources: "{{ controller_inventory_sources | default([]) + org_var['controller_inventory_sources'] }}"
        controller_templates: "{{ controller_templates | default([]) + org_var['controller_templates'] }}"
        controller_labels: "{{ controller_labels | default([]) + org_var['controller_labels'] }}"
        controller_notifications: "{{ controller_notifications | default([]) + org_var['controller_notifications'] }}"
        controller_projects: "{{ controller_projects | default([]) + org_var['controller_projects'] }}"
        controller_schedules: "{{ controller_schedules | default([]) + org_var['controller_schedules'] }}"
        controller_workflows: "{{ controller_workflows | default([]) + org_var['controller_workflows'] }}"
        controller_roles: "{{ controller_roles | default([]) + [ {'team': org_var['team_name'], 'role': 'update', 'projects': project_names } ] }}"
      loop: "{{ org_directories }}"
      no_log: true
      vars:
        org_var: "{{ lookup('vars', item) }}"
        project_names: "[ {% for project in org_var['controller_projects'] %}'{{ project['name'] }}'{{ ',' if not loop.last else '' }}{% endfor %} ]"

    - name: Include setting role
      ansible.builtin.include_role:
        name: infra.controller_configuration.settings
      when: controller_settings | length is not match('0')

    - name: Include organization role
      ansible.builtin.include_role:
        name: infra.controller_configuration.organizations
      vars:
        assign_galaxy_credentials_to_org: false
        assign_default_ee_to_org: false
      when: controller_organizations | length is not match('0')

    - name: Include labels role
      ansible.builtin.include_role:
        name: infra.controller_configuration.labels
      when: controller_labels | length is not match('0')

    - name: Include users role
      ansible.builtin.include_role:
        name: infra.controller_configuration.users
      vars:
        controller_configuration_users_secure_logging: true
      when: controller_user_accounts | length is not match('0')

    - name: Include teams role
      ansible.builtin.include_role:
        name: infra.controller_configuration.teams
      when: controller_teams | length is not match('0')

    - name: Include credential_types role
      ansible.builtin.include_role:
        name: infra.controller_configuration.credential_types
      when: controller_credential_types | length is not match('0')

    - name: Include credential role
      ansible.builtin.include_role:
        name: infra.controller_configuration.credentials
      vars:
        controller_configuration_credentials_secure_logging: true
      when: controller_credentials | length is not match('0')

    - name: Include credential_input_sources role
      ansible.builtin.include_role:
        name: infra.controller_configuration.credential_input_sources
      when: controller_credential_input_sources | length is not match('0')

    - name: Include instance_groups role
      ansible.builtin.include_role:
        name: infra.controller_configuration.instance_groups
      when: controller_instance_groups | length is not match('0')

    - name: Include execution_environments role
      ansible.builtin.include_role:
        name: infra.controller_configuration.execution_environments
      when: controller_execution_environments | length is not match('0')

    - name: Include organizations role
      ansible.builtin.include_role:
        name: infra.controller_configuration.organizations
      when: controller_organizations | length is not match('0')

    - name: Include projects role
      ansible.builtin.include_role:
        name: infra.controller_configuration.projects
      when: controller_projects | length is not match('0')

    - name: Include inventories role
      ansible.builtin.include_role:
        name: infra.controller_configuration.inventories
      when: controller_inventories | length is not match('0')

    - name: Include inventory_sources role
      ansible.builtin.include_role:
        name: infra.controller_configuration.inventory_sources
      when: controller_inventory_sources | length is not match('0')

    - name: Include inventory_source_update role
      ansible.builtin.include_role:
        name: infra.controller_configuration.inventory_source_update

    - name: Include groups role
      ansible.builtin.include_role:
        name: infra.controller_configuration.groups
      when: controller_groups | length is not match('0')

    - name: Include hosts role
      ansible.builtin.include_role:
        name: infra.controller_configuration.hosts
      when: controller_hosts | length is not match('0')

    - name: Include applications role
      ansible.builtin.include_role:
        name: infra.controller_configuration.applications
      when: controller_applications | length is not match('0')

    - name: Include job_templates role
      ansible.builtin.include_role:
        name: infra.controller_configuration.job_templates
      when: controller_templates | length is not match('0')

    - name: Include workflow_job_templates role
      ansible.builtin.include_role:
        name: infra.controller_configuration.workflow_job_templates
      when: controller_workflows | length is not match('0')

    - name: Include schedules role
      ansible.builtin.include_role:
        name: infra.controller_configuration.schedules
      when: controller_schedules | length is not match('0')

    - name: Include Notification role
      ansible.builtin.include_role:
        name: infra.controller_configuration.notification_templates
      when: controller_notifications | length is not match('0')

    - name: Include roles role
      ansible.builtin.include_role:
        name: infra.controller_configuration.roles
      when: controller_roles | length is not match('0')
...
